set nocompatible
" set rtp+=~/.vim/bundle/neobundle.vim/

" call neobundle#rc(expand('~/.vimbundles'))

" " Bundles
" NeoBundleFetch 'Shougo/neobundle.vim'

filetype plugin indent on
syntax on

" Theming
if $TMUX != '' && $TERM != 'screen-256color'
    set term=screen-256color
endif

set t_Co=256
color vwilight

let mapleader = ','

" display options
set title
set visualbell
set number
set ruler
set list
set listchars=tab:⇥\ ,trail:·,extends:⋯,precedes:⋯,eol:¬
set encoding=utf-8
set wrap
set linebreak
set showcmd
set laststatus=2
set showbreak=↪

" formatting options
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set smarttab
set autoindent
set smartindent
set shiftround
set noeol
set backspace=indent,eol,start

" buffer options
set hidden
set autoread
set autowrite

" search options
set hlsearch
set incsearch
set ignorecase
set smartcase

set nospell

set wildmenu
set wildmode=list:longest,list:full
set wildignore+=*.o,*.pyc,*.git,*.hg,*.svn,*.DS_STORE,*.sw?,*.py[co],*.orig

" backup options
set noswapfile
set nobackup
set nowritebackup

" highlight JSON as JavaScript
au BufRead,BufNewFile *.json set ft=javascript

" highlight Jinja2 template as Jinja
au BufRead,BufNewFile *.jinja2 set ft=jinja

" ensure Go and Makefile always use tabs instead of spaces
au FileType make,go,java  setl noexpandtab

" set 2-spaces indentation for Ruby, Coffeescript, and YAML files
au FileType coffee,yaml,vim,ruby  setl softtabstop=2 shiftwidth=2 tabstop=2

" Folding
set foldmethod=indent
set nofoldenable

" bind K to grep word under cursor
" nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" trailing whitespace
autocmd BufWritePre * :silent! %s/\s\+$//e
autocmd BufWritePre * :silent! %s#\($\n\)\+\%$##

" Highlight the overflow text
" http://stackoverflow.com/questions/235439/vim-80-column-layout-concerns
highlight OverLength ctermbg=red ctermfg=white
au FileType python match OverLength /\%81v.\+/

" Toggles paste mode (http://is.gd/FxlJAH)
set pastetoggle=<F9>

" Turn off search highlighting
nmap <leader>/ :nohl<CR>

" --- SuperTab
let g:SuperTabDefaultCompletionType = 'context'
let g:SuperTabClosePreviewOnPopupClose = 1
let g:SuperTabCompletionContexts = ['s:ContextText', 's:ContextDiscover']
let g:SuperTabNoCompleteAfter = ['^', '\s', ',']
let g:SuperTabContextDiscoverDiscovery = ['&completefunc:<c-x><c-u>', '&omnifunc:<c-x><c-o>']

" --- Autopairs
let g:AutoPairsShortcutFastWrap = '<C-f>'
let g:AutoPairsMapCR = 0

" --- Rainbow Parentheses
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" --- Airline
let g:airline_theme='dark'
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:ttimeoutlen=50

" --- Emmet
let g:user_emmet_leader_key='<C-e>'

" --- Clam
let g:clam_winpos='botright'

" --- Pycomplexity
nnoremap <silent> <F6> :Complexity<CR>

" --- Commentary
autocmd FileType nginx set commentstring=#\ %s
autocmd FileType dockerfile set commentstring=#\ %s
autocmd FileType ldif set commentstring=#\ %s

" --- Ultisnips
let g:ultisnips_python_style = 'sphinx'
let g:UltiSnipsExpandTrigger='<tab>'
let g:UltiSnipsJumpForwardTrigger='<tab>'
let g:UltiSnipsJumpBackwardTrigger='<s-tab>'
let g:UltiSnipsDontReverseSearchPath="1"

" --- TagBar
" toggle TagBar with F4
nnoremap <silent> <F4> :TagbarToggle<CR>
" set focus to TagBar when opening it
let g:tagbar_autofocus = 1

" --- NERDTree
nnoremap <F2> :NERDTreeToggle<CR>
autocmd vimenter * if !argc() | NERDTree | endif
autocmd bufenter * if (winnr('$') == 1 && exists('b:NERDTreeType') && b:NERDTreeType == 'primary') | q | endif
let NERDTreeIgnore = ['\.pyc$', '\.egg-info$', '^dist$', '^build$', '^__pycache__$']
let NERDTreeHightlightCursorline=1

" --- Mundo
set undofile
set undodir=~/.vim/undo
nnoremap <F3> :MundoToggle<CR>

" -- ack.vim
" Options
" --vimgrep -> Needed to parse the rg response properly for ack.vim
" --type-not sql -> Avoid huge sql file dumps as it slows down the search
" --smart-case -> Search case insensitive if all lowercase pattern, Search case sensitively otherwise
let g:ackprg = 'rg --vimgrep --type-not sql --smart-case'

" Auto close the Quickfix list after pressing '<enter>' on a list item
let g:ack_autoclose = 1

" Any empty ack search will search for the work the cursor is on
let g:ack_use_cword_for_empty_search = 1

" Don't jump to first match
cnoreabbrev Ack Ack!

" Maps <leader>/ so we're ready to type the search keyword
" nnoremap <Leader>/ :Ack!<Space>

" Navigate quickfix list with ease
nnoremap <silent> [q :cprevious<CR>
nnoremap <silent> ]q :cnext<CR>

if executable("rg")
   set grepprg=rg\ --color=never

  " Use rg in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'

  " rg is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
else
  let g:ctrlp_clear_cache_on_exit = 0
endif

" " --- Ag
" " nnoremap <leader>\ :Ag<SPACE>
" let g:agprg="ag --nogroup --nocolor --column"

" " --- Syntastic
" let g:syntastic_error_symbol = '✗'
" let g:syntastic_warning_symbol = '⚠'
" let g:syntastic_auto_jump = 1
" let g:syntastic_auto_loc_list = 2
" let g:syntastic_aggregate_errors = 1

" let g:syntastic_javascript_checkers = ['jsxhint']
" let g:syntastic_python_checkers = ["flake8"]
" let g:syntastic_python_flake8_args="--ignore=E501"
" let g:syntastic_zig_checkers = ["zig"]
" let g:syntastic_zig_zig_args = ["fmt"]

" --- indentLine
let g:indentLine_color_term = 235
let g:indentLine_char = '¦'

" Faster panes navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" vim-go
" let g:go_bin_path = expand('~/.gobin')
" let g:go_fmt_command = "goimports"
" au FileType go nmap <Leader>gd <Plug>(go-doc)
" au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
" au FileType go nmap <leader>r <Plug>(go-run)
" au FileType go nmap <leader>b <Plug>(go-build)
" au FileType go nmap <leader>t <Plug>(go-test)
" au FileType go nmap <leader>c <Plug>(go-coverage)
" au FileType go nmap gd <Plug>(go-def)
" au FileType go nmap <Leader>ds <Plug>(go-def-split)
" au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
" au FileType go nmap <Leader>dt <Plug>(go-def-tab)

" Rust
au FileType rust match OverLength /\%99v.\+/
let g:rustfmt_autosave = 1

" Zig
let g:zig_fmt_autosave = 1

" --- ALE
let g:ale_completion_enabled = 1
set omnifunc=ale#completion#OmniFunc

let g:ale_linters = {
\   'python': ['flake8', 'bandit'],
\   'rust': ['analyzer'],
\}

let g:ale_python_flake8_options = '--ignore=E501'

" let g:airline#extensions#ale#enabled = 1

let g:ale_echo_msg_error_str = 'ERROR'
let g:ale_echo_msg_warning_str = 'WARNING'
let g:ale_echo_msg_format = '[%linter%] %code%: %s [%severity%]'

" let g:ale_open_list = 1

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" Last thing to do with
" " NeoBundleCheck
