set encoding=utf-8
scriptencoding utf-8

" Be iMproved
set nocompatible

" --- dein
set runtimepath+=~/.dein/repos/github.com/Shougo/dein.vim

call dein#begin('~/.dein')

call dein#add('~/.dein/repos/github.com/Shougo/dein.vim')

call dein#add('airblade/vim-gitgutter')
call dein#add('ryanoasis/vim-devicons')
call dein#add('bling/vim-airline')
call dein#add('tpope/vim-fugitive')
call dein#add('kien/rainbow_parentheses.vim')
call dein#add('tpope/vim-commentary')
call dein#add('simnalamburt/vim-mundo')
call dein#add('preservim/nerdtree')
call dein#add('ctrlpvim/ctrlp.vim')
call dein#add('easymotion/vim-easymotion')
call dein#add('jiangmiao/auto-pairs')
call dein#add('godlygeek/tabular')
call dein#add('chrisbra/Recover.vim')
call dein#add('mileszs/ack.vim')
call dein#add('Yggdroot/indentLine')
call dein#add('kana/vim-scratch')

call dein#add('tpope/vim-haml')
call dein#add('mattn/emmet-vim')
call dein#add('mitsuhiko/vim-jinja')
call dein#add('mitsuhiko/vim-rst')
call dein#add('ekalinin/dockerfile.vim')
call dein#add('vim-scripts/po.vim')
call dein#add('cespare/vim-toml')
call dein#add('hashivim/vim-terraform')
call dein#add('fatih/vim-go')
call dein#add('rust-lang/rust.vim')
call dein#add('pangloss/vim-javascript')
call dein#add('othree/html5.vim')
call dein#add('chr4/nginx.vim')
call dein#add('tpope/vim-markdown')
call dein#add('MaxMEllon/vim-jsx-pretty')
call dein#add('leafgarland/typescript-vim')
call dein#add('udalov/kotlin-vim')
call dein#add('gleam-lang/gleam.vim')
call dein#add('ziglang/zig.vim')
call dein#add('elixir-editors/vim-elixir')
call dein#add('jjo/vim-cue')
call dein#add('junegunn/vader.vim')
call dein#add('dense-analysis/ale')
call dein#add('neoclide/coc.nvim', {'merged': 0})

call dein#end()

filetype plugin indent on
syntax on

" Theming
if $TMUX !=# '' && $TERM !=# 'screen-256color'
    set term=screen-256color
endif

set t_Co=256
color vwilight

let mapleader = ','

" display options
set title
set visualbell
set number
set ruler
set list
set listchars=tab:⇥\ ,trail:·,extends:⋯,precedes:⋯,eol:¬
set wrap
set linebreak
set showcmd
set laststatus=2
set showbreak=↪

" formatting options
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set smarttab
set autoindent
set smartindent
set shiftround
set noendofline
set backspace=indent,eol,start

" buffer options
set hidden
set autoread
set autowrite

" search options
set hlsearch
set incsearch
set ignorecase
set smartcase

set nospell

set wildmenu
set wildmode=list:longest,list:full
set wildignore+=*.o,*.pyc,*.git,*.hg,*.svn,*.DS_STORE,*.sw?,*.py[co],*.orig

" backup options
set noswapfile
set nobackup
set nowritebackup

augroup codestyle
  au BufRead,BufNewFile *.jinja2 set ft=jinja

  " ensure these filetypes always use tabs instead of spaces
  au FileType make,go,java setl noexpandtab

  " set 2-spaces indentation for the following filetypes
  au FileType yaml,vim,gleam,elixir setl softtabstop=2 shiftwidth=2 tabstop=2

  au FileType python match OverLength /\%81v.\+/

  au FileType rust match OverLength /\%99v.\+/
augroup END

" Folding
set foldmethod=indent
set nofoldenable

augroup whitespace
  " trailing whitespace
  autocmd BufWritePre * :silent! %s/\s\+$//e
  autocmd BufWritePre * :silent! %s#\($\n\)\+\%$##
augroup END

" Highlight the overflow text
" http://stackoverflow.com/questions/235439/vim-80-column-layout-concerns
highlight OverLength ctermbg=red ctermfg=white

" Toggles paste mode (http://is.gd/FxlJAH)
set pastetoggle=<F9>

" Turn off search highlighting
nmap <leader>/ :nohl<CR>

" --- Autopairs
let g:AutoPairsShortcutFastWrap = '<C-f>'
let g:AutoPairsMapCR = 0

" --- Rainbow Parentheses
augroup rainbow
  au VimEnter * RainbowParenthesesToggle
  au Syntax * RainbowParenthesesLoadRound
  au Syntax * RainbowParenthesesLoadSquare
  au Syntax * RainbowParenthesesLoadBraces
augroup END

" --- Airline
let g:airline_theme='dark'
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:ttimeoutlen=50
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#ale#enabled = 1

" --- Emmet
let g:user_emmet_leader_key='<C-e>'

" --- Commentary
augroup commentary
  autocmd FileType nginx set commentstring=#\ %s
  autocmd FileType dockerfile set commentstring=#\ %s
  autocmd FileType ldif set commentstring=#\ %s
augroup END

" --- NERDTree
nnoremap <F2> :NERDTreeToggle<CR>
let NERDTreeIgnore = ['\.pyc$', '\.egg-info$', '^__pycache__$']
let NERDTreeHightlightCursorline=1

augroup nerdtree
  autocmd vimenter * if !argc() | NERDTree | endif
  autocmd bufenter * if (winnr('$') == 1 && exists('b:NERDTreeType') && b:NERDTreeType == 'primary') | q | endif
  " Exit Vim if NERDTree is the only window remaining in the only tab.
  autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
augroup END

" --- Mundo
set undofile
set undodir=~/.vim/undo
nnoremap <F3> :MundoToggle<CR>

" --- ack.vim
" Options
" --vimgrep -> Needed to parse the rg response properly for ack.vim
" --type-not sql -> Avoid huge sql file dumps as it slows down the search
" --smart-case -> Search case insensitive if all lowercase pattern, Search case sensitively otherwise
let g:ackprg = 'rg --vimgrep --type-not sql --smart-case'

" Auto close the Quickfix list after pressing '<enter>' on a list item
let g:ack_autoclose = 1

" Any empty ack search will search for the work the cursor is on
let g:ack_use_cword_for_empty_search = 1

" Don't jump to first match
cnoreabbrev Ack Ack!

" Navigate quickfix list with ease
nnoremap <silent> [q :cprevious<CR>
nnoremap <silent> ]q :cnext<CR>

if executable('rg')
   set grepprg=rg\ --color=never

  " Use rg in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'

  " rg is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
else
  let g:ctrlp_clear_cache_on_exit = 0
endif

" --- indentLine
let g:indentLine_color_term = 235
let g:vim_json_conceal=0
let g:markdown_syntax_conceal=0
let g:indentLine_char_list = ['|', '¦', '┆', '┊']

" Faster panes navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" --- Rust
let g:rustfmt_autosave = 1

" --- Zig
let g:zig_fmt_autosave = 1

" --- ALE
let g:ale_disable_lsp = 1
" let g:ale_completion_enabled = 1

let g:ale_linters = {
\   'python': ['flake8', 'bandit'],
\   'vim': ['vint'],
\   'sh': ['shellcheck'],
\   'dockerfile': ['hadolint'],
\   'make': ['checkmake'],
\}

 let g:ale_fixers = {
 \   'elixir': ['mix_format'],
 \}

let g:ale_python_flake8_options = '--ignore=E501,A003'
let g:ale_python_bandit_options = '--skip=B101'
let g:ale_yaml_actionlint_options = '-shellcheck= -pyflakes= --no-color'
let g:ale_fix_on_save = 1

augroup docker
  au FileType Dockerfile set filetype=dockerfile
augroup END

augroup actionlint
  " use actionlint for GitHub workflow
  au BufRead,BufNewFile */.github/*/*.y{,a}ml let b:ale_linters = {'yaml': ['actionlint']}
augroup END

" Only run linters named in ale_linters settings.
let g:ale_linters_explicit = 1
let g:ale_echo_msg_error_str = 'ERROR'
let g:ale_echo_msg_warning_str = 'WARNING'
let g:ale_echo_msg_info_str = 'INFO'
let g:ale_echo_msg_format = '[%linter%] %code%: %s [%severity%]'
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚠'
" let g:ale_open_list = 1

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" --- coc.nvim
" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

let g:coc_snippet_next = '<tab>'

let g:go_def_mapping_enabled = 0

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nnoremap <silent> <leader>co  :<C-u>CocList outline<CR>
